2019-08-14  08:48:06.795 [https-jsse-nio-8443-exec-8] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of ] with root cause
net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of 
	at net.sf.json.util.JSONTokener.syntaxError(JSONTokener.java:499)
	at net.sf.json.JSONObject._fromJSONTokener(JSONObject.java:972)
	at net.sf.json.JSONObject._fromString(JSONObject.java:1201)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:165)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:134)
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  08:51:50.014 [https-jsse-nio-8443-exec-6] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of ] with root cause
net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of 
	at net.sf.json.util.JSONTokener.syntaxError(JSONTokener.java:499)
	at net.sf.json.JSONObject._fromJSONTokener(JSONObject.java:972)
	at net.sf.json.JSONObject._fromString(JSONObject.java:1201)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:165)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:134)
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  08:54:24.797 [https-jsse-nio-8443-exec-6] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of ] with root cause
net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of 
	at net.sf.json.util.JSONTokener.syntaxError(JSONTokener.java:499)
	at net.sf.json.JSONObject._fromJSONTokener(JSONObject.java:972)
	at net.sf.json.JSONObject._fromString(JSONObject.java:1201)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:165)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:134)
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:21:24.219 [https-jsse-nio-8443-exec-9] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArrayIndexOutOfBoundsException: 1] with root cause
java.lang.ArrayIndexOutOfBoundsException: 1
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:316)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:36:44.348 [https-jsse-nio-8443-exec-10] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][https-jsse-nio-8443-exec-10] Exception processing template "user/login": An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.attoparser.ParseException: (Line = 106, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
    
    
    
    
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 66 common frames omitted
2019-08-14  09:36:44.349 [https-jsse-nio-8443-exec-10] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)] with root cause
org.attoparser.ParseException: (Line = 106, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
    
    
    
    
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:36:46.541 [https-jsse-nio-8443-exec-7] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][https-jsse-nio-8443-exec-7] Exception processing template "user/login": An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.attoparser.ParseException: (Line = 106, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
    
    
    
    
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 66 common frames omitted
2019-08-14  09:36:46.544 [https-jsse-nio-8443-exec-7] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)] with root cause
org.attoparser.ParseException: (Line = 106, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
    
    
    
    
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:36:48.602 [https-jsse-nio-8443-exec-6] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][https-jsse-nio-8443-exec-6] Exception processing template "user/login": An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.attoparser.ParseException: (Line = 106, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
    
    
    
    
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 66 common frames omitted
2019-08-14  09:36:48.607 [https-jsse-nio-8443-exec-6] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)] with root cause
org.attoparser.ParseException: (Line = 106, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
    
    
    
    
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:36:58.037 [https-jsse-nio-8443-exec-2] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][https-jsse-nio-8443-exec-2] Exception processing template "user/login": An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.attoparser.ParseException: (Line = 106, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
    
    
    
    
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 66 common frames omitted
2019-08-14  09:36:58.042 [https-jsse-nio-8443-exec-2] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 106, col 8)] with root cause
org.attoparser.ParseException: (Line = 106, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
    
    
    
    
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:37:56.998 [https-jsse-nio-8443-exec-8] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][https-jsse-nio-8443-exec-8] Exception processing template "user/login": An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 66 common frames omitted
2019-08-14  09:37:57.007 [https-jsse-nio-8443-exec-8] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)] with root cause
org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:37:59.139 [https-jsse-nio-8443-exec-10] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][https-jsse-nio-8443-exec-10] Exception processing template "user/login": An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 66 common frames omitted
2019-08-14  09:37:59.149 [https-jsse-nio-8443-exec-10] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)] with root cause
org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:38:03.370 [https-jsse-nio-8443-exec-10] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][https-jsse-nio-8443-exec-10] Exception processing template "user/login": An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 66 common frames omitted
2019-08-14  09:38:03.380 [https-jsse-nio-8443-exec-10] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)] with root cause
org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:38:05.992 [https-jsse-nio-8443-exec-2] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][https-jsse-nio-8443-exec-2] Exception processing template "user/login": An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 66 common frames omitted
2019-08-14  09:38:05.999 [https-jsse-nio-8443-exec-2] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)] with root cause
org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:38:50.069 [https-jsse-nio-8443-exec-10] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][https-jsse-nio-8443-exec-10] Exception processing template "user/login": An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 66 common frames omitted
2019-08-14  09:38:50.079 [https-jsse-nio-8443-exec-10] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)] with root cause
org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:38:52.324 [https-jsse-nio-8443-exec-10] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][https-jsse-nio-8443-exec-10] Exception processing template "user/login": An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 66 common frames omitted
2019-08-14  09:38:52.344 [https-jsse-nio-8443-exec-10] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)] with root cause
org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  09:38:54.337 [https-jsse-nio-8443-exec-9] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][https-jsse-nio-8443-exec-9] Exception processing template "user/login": An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 66 common frames omitted
2019-08-14  09:38:54.357 [https-jsse-nio-8443-exec-9] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/user/login.html]" - line 90, col 8)] with root cause
org.attoparser.ParseException: (Line = 90, Column = 8) Incomplete structure: "<a href="https://github.com/login/oauth/authorize?client_id=f4dd88278efb692eb6d6&redirect_uri=https://localhost:8443/callback""></a>
    </div>
</div>

<div class="login" id="faceLoginDiv" style="position: relative;display: none;text-align: center;padding: 0;background-image: url('/css/img/faceLoginBackground.png')">
    <div style="height: 76px;width: 100%;position: relative;">
        <div style="float: right;width: 68px;height: 68px;">
            <div onmouseover="changeImg(this,2)" onmouseout="changeImg(this,1)"
                 onmousedown="changeImg(this,3)" onmouseup="changeImg(this,2)"
                 style="padding: 14px;">
                <img style="cursor:pointer;" imgName="usernameLogin" src="/css/img/usernameLogin1.png" onclick="changeToUsernameLogin();">
            </div>
        </div>
        <div onclick="changeToUsernameLogin();" style="width: 136px;height: 26px;line-height: 26px;position: absolute;top: 20px;right: 66px;background: url('/css/img/loginTip.png') no-repeat;text-align: center;cursor:pointer;"><span style="color: white;">用户名密码登录</span></div>
    </div>
    <div id="webcam" style="transform:scale(1.4375);margin-top: 52.5px;display: none;z-index: 1;"></div>
    <button id="makeVideo" onclick="makeVideo()" style="display: none;">打开摄像头</button>
    <video id="video1" width="460">
        您的浏览器不支持 HTML5 video 标签。
    </video>
    <img id="faceBorder" src="/css/img/takePhoto.png" width="460" height="345" style="position: absolute;top: 76px;left: 0;z-index: 99;">
    <canvas id="canvas" width="460" height="345" style="display: none;"></canvas>
    <canvas id="canvasIE" width="320" height="240" style="display: none;"></canvas>
    <button id="takePhotoButton" class='layui-btn' type="button" onclick="capture()" style="margin-left: 0;position: absolute;bottom: 20px;left: 60px;">比对</button>
    <img id="base64image" width="460" height="345" style="display: none;"/>
</div>


<script type="text/javascript" src="/js/jquery.min.js"></script>
<script src="/js/jquery.webcam.js"></script>
<script type="text/javascript" src="/layui/layui.js"></script>
<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
    });

    var ifFirstToFaceLogin = true;
    var myVideo = document.getElementById("video1");
    var canvas = document.getElementById("canvas");
    var context = canvas.getContext("2d");
    var pos = 0;
    var ctx = null;
    var image = [];
    function changeToFaceLogin() {
        $("#usernameLoginDiv").hide();
        $("#faceLoginDiv").show();
        if (ifFirstToFaceLogin) {
            ifFirstToFaceLogin = false;
            if (ifIE()) {
                var fls = flashChecker();
                if (!fls.h) {
                    layui.use(['layer'], function () {
                        var layer = layui.layer;
                        layer.confirm('检测到您的浏览器未安装Flash插件,如不安装则无法使用拍照功能!是否下载并安装?',{btn:['是','否'],icon:3,title:"提示"},function (index) {
                            document.location.href = '/employeeManage/downloadPlugin?pluginName=flash';
                            layer.close(index);
                        });
                    });
                } else {
                    $("#video1").hide();
                    $("#webcam").show();
                    $("#takePhotoButton").addClass('top52');
                    $("#faceBorder").hide();
                    var canvas = document.getElementById("canvasIE");
                    if(canvas.getContext) {
                        ctx = canvas.getContext("2d");
                        ctx.clearRect(0, 0, 320, 240);
                        var img = new Image();
                        img.onload = function() {
                            ctx.drawImage(img, 129, 89);
                        };
                        image = ctx.getImageData(0, 0, 320, 240);
                    }
                    $(document).ready(function() {
                        jQuery("#webcam").webcam({
                            width: 320,
                            height: 240,
                            mode: "callback",
                            swffile: "/jscam_canvas_only.swf",
                            onTick: function(remain) {},
                            onSave: function(data) {
                                var col = data.split(";");
                                var img = image;
                                for(var i = 0; i < 320; i++) {
                                    var tmp = parseInt(col[i]);
                                    try {
                                        img.data[pos + 0] = (tmp >> 16) & 0xff;
                                    } catch (e) {
                                        console.log(e.message);
                                    }
                                    img.data[pos + 1] = (tmp >> 8) & 0xff;
                                    img.data[pos + 2] = tmp & 0xff;
                                    img.data[pos + 3] = 0xff;
                                    pos += 4;
                                }
                                if(pos >= 4 * 320 * 240) {
                                    ctx.putImageData(img, 0, 0);
                                    var base64image = canvas.toDataURL("image/png");
                                    faceLogin(base64image);
                                    pos = 0;
                                }
                            },

                            onCapture: function() {
                                webcam.save();
                                // Show a flash for example
                            },

                            debug: function(type, string) {
                                //alert('type:' + type + ',string:' + string);
                                layui.use(['layer'], function() {
                                    var layer = layui.layer;
                                    if (type == "error" && string == "No camera was detected.") {
                                        layer.alert("检测到您的设备未安装摄像头",{end:function () {
                                                parent.layer.closeAll();
                                            }});
                                    }
                                });
                            },

                            onLoad: function() {
                                // Page load
                            }

                        });
                        window.addEventListener("load", function() {



                        }, false);
                    });
                }
            } else {
                if (navigator.mediaDevices === undefined) {
                    navigator.mediaDevices = {};
                }
                if (navigator.mediaDevices.getUserMedia === undefined) {
                    navigator.mediaDevices.getUserMedia = function (constraints) {
                        var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
                        if (!getUserMedia) {
                            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                        }
                        return new Promise(function (resolve, reject) {
                            getUserMedia.call(navigator, constraints, resolve, reject);
                        });
                    }
                }
                window.URL = (window.URL || window.webkitURL || window.mozURL || window.msURL);
                $("#makeVideo").click();
            }
        }
    }

    function changeToUsernameLogin() {
        $("#faceLoginDiv").hide();
        $("#usernameLoginDiv").show();
    }

    function capture() {
        if (ifIE()) {
            webcam.capture();
        } else {
            context.drawImage(myVideo, 0, 0, canvas.width, canvas.height);
            var base64image = canvas.toDataURL("image/jpeg");
            faceLogin(base64image);
        }
    }

    var mediaOpts = {
        audio: false,
        video: true,
    }

    function successFunc(stream) {
        //var video = document.querySelector('video');
        if ("srcObject" in myVideo) {
            myVideo.srcObject = stream
        } else {
            myVideo.src = window.URL && window.URL.createObjectURL(stream) || stream
        }
        myVideo.play();
    }

    function errorFunc(err) {
        layui.use(['layer'], function() {
            var layer = layui.layer;
            if (err.name == "NotFoundError") {
                layer.alert("检测到您的设备未安装摄像头",{end:function () {
                        parent.layer.closeAll();
                    }});
            }
        });
    }

    function makeVideo()
    {
        if (navigator.getUserMedia) {
            //调用用户媒体设备，访问摄像头
            navigator.getUserMedia(mediaOpts, successFunc, errorFunc);
        } else {
            alert("you exploer isn't support to access media device");
        }
    }

    function ifIE() {
        var ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('trident') > -1) {
            return true;
        } else {
            return false;
        }
    }

    //检测flash
    function flashChecker() {
        //是否安装了flash
        var hasFlash = 0;
        //flash版本
        var flashVersion = 0;
        //是否IE浏览器
        if (ifIE()) {
            try {
                var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
            } catch (e) {}
            if (swf) {
                hasFlash = 1;
                VSwf = swf.GetVariable("$version");
                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
            }
        } else {
            if (navigator.plugins && navigator.plugins.length > 0) {
                try {
                    var swf = navigator.plugins["Shockwave Flash"];
                } catch (e) {}
                if (swf) {
                    hasFlash = 1;
                    var words = swf.description.split(" ");
                    for (var i = 0; i < words.length; ++i) {
                        if (isNaN(parseInt(words[i])))
                            continue;
                        flashVersion = parseInt(words[i]);
                    }
                }
            }
        }
        return {
            h : hasFlash,
            v : flashVersion
        };
    }


    function faceLogin(imgBase64) {
        //过滤base64格式
        imgBase64 = imgBase64.replace('data:image/jpeg;base64,','');
        imgBase64 = imgBase64.replace('data:;base64,','');
        imgBase64 = imgBase64.replace('data:image/png;base64,','');
        imgBase64 = imgBase64.replace('data:image/bmp;base64,','');
        var param = {
            imgBase64:imgBase64
        };
        $.ajax({
            url: "/faceLogin",
            type: "post",
            data: param,
            async: false,
            success: function(data) {
                if (data == -3) {
                    layer.alert('未检测到人脸',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -2) {
                    layer.alert('人脸宽度小于200',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == -1) {
                    layer.alert('您未登记',{icon:2,title:"提示"},function (index) {
                        layer.close(index);
                    });
                }
                if (data == 0) {
                    window.location.href = "/main";
                }
            },
            error: function () {
                layer.alert('服务器开小差了',{icon:2,title:"提示"},function (index) {
                    layer.close(index);
                });
            }
        });
    }

    //图标的鼠标移入/移出/点击切换图标
    function changeImg(obj, status) {
        var imgName = $(obj).find("img").attr("imgName");
        $(obj).find("img").attr("src", "/css/img/" + imgName + status + ".png");
    }
    //验证登录输入
    function validator() {     //账号密码登录验证
        var myreg = /^[1][3,4,5,7,8][0-9]{9}$/;
        if ($("#name").val().length == 0) {
            layer.msg('请输入用户名', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#name").focus();
                //$("#name").css("background","url(../images/login/account_error.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_error.png');
                $("#name").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }
        if ($("#password").val().length == 0) {
            layer.msg('请输入密码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#password").focus();
                //$("#password").css("background","url(../images/login/password_error.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_error.png');
                $("#password").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        if ($("#securitycode").val().length == 0) {
            layer.msg('请输入验证码', {icon: 0, anim: 6, time: 1000}, function (index) {
                $("#securitycode").focus();
                //$("#securitycode").css("background","url(../images/login/securitycode_error.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_error.png');
                $("#securitycode").css("border-bottom", "1px solid #f55366");
                layer.close(index);
            });
            return false;
        }

        return true;
    }


    //获取图形验证码
    function getSecurityCode() {
        $("#verifyCodeImage").get(0).src = '/graphics?' + Math.random();
    }

    /*$("#changesecuritycode").click(function() {
        getSecurityCode();
    });

    //点击图片生成验证码
    $("#securitycode ~ img").click(function() {
        getSecurityCode();
    });*/
</script>

<script type="text/javascript">
    layui.use(['layer'], function () {
        var layer = layui.layer;
        $(document).ready(function () {
            /*if (self != top) {
                parent.window.location.replace(window.location.href);
            }*/
            /*if (window !=window.parent){
                window.parent.location.reload(true);
            }*/
            $("#name").focus(function () {
                //$("#name").css("background","url(../images/login/account_on.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account_on.png');
                $("#name").css("border-bottom", "1px solid #54b5ff");
            });
            $("#name").blur(function () {
                //$("#name").css("background","url(../images/login/account.png) no-repeat");
                $('#left_n').attr('src', '/images/login/account.png');
                $("#name").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#password").focus(function () {
                //$("#password").css("background","url(../images/login/password_on.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password_on.png');
                $("#password").css("border-bottom", "1px solid #54b5ff");
            });
            $("#password").blur(function () {
                //$("#password").css("background","url(../images/login/password.png) no-repeat");
                $('#left_p').attr('src', '/images/login/password.png');
                $("#password").css("border-bottom", "1px solid #b8b7b7");
            });

            $("#securitycode").focus(function () {
                //$("#securitycode").css("background","url(../images/login/idcode_on.png) no-repeat");
                $('#left_s').attr('src', '/images/login/securitycode_on.png');
                $("#securitycode").css("border-bottom", "1px solid #54b5ff");
            });
            $("#securitycode").blur(function () {
                //$("#securitycode").css("background","url(../images/login/idcode.png) no-repeat");
                //$('#id').attr('src','a.png');
                $('#left_s').attr('src', '/images/login/securitycode.png');
                $("#securitycode").css("border-bottom", "1px solid #b8b7b7");
            });
            var loginResults = [
                true,
                "此用户不存在 ",
                "获取用户信息失败",
                "密码错误",
                "用户已禁用",
                "您输入的验证码不对，请重新输入。",
                "验证码已失效或还未获取验证码，请重新输入。",
                "您的密码是原始密码",
                "登录后请修改密码",
                "修改成功，请重新登录！",
                "服务器未连接，请联系管理员",
                "用户已登录",
                "修改密码错误！"];
            var loginResult = [[${loginResult}]];
            //alert(loginResults[parseInt(loginResult)]);
            if (loginResult != ""
                && parseInt(loginResult) != NaN) {
                if (loginResults[parseInt(loginResult)] == true) {
                    location.href = "";
                } else if (typeof loginResults[parseInt(loginResult)] == "string") {
                    //alert();   //登录错误信息提示
                    layer.alert(loginResults[parseInt(loginResult)], {icon: 0}, function (index) {
                        //do something
                        window.parent.location.href = '/login';
                        // location.reload();
                        $("#name").focus();
                        layer.close(index);

                    });
                }
            }
        });
    });


</script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  10:15:16.947 [https-jsse-nio-8443-exec-7] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArrayIndexOutOfBoundsException: 1] with root cause
java.lang.ArrayIndexOutOfBoundsException: 1
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:316)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  10:24:51.830 [https-jsse-nio-8443-exec-7] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArrayIndexOutOfBoundsException: 1] with root cause
java.lang.ArrayIndexOutOfBoundsException: 1
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:316)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  10:25:18.515 [https-jsse-nio-8443-exec-1] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArrayIndexOutOfBoundsException: 1] with root cause
java.lang.ArrayIndexOutOfBoundsException: 1
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:316)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  10:34:24.415 [restartedMain] WARN  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Cannot deserialize session attribute [org.apache.shiro.subject.support.DefaultSubjectContext_PRINCIPALS_SESSION_KEY] for session [6BA8B2C43A18863F09246C551FB34177]
2019-08-14  10:59:43.855 [https-jsse-nio-8443-exec-2] ERROR com.jinglun.guard.systemManage.service.impl.ParametercontrolServiceImpl - 公共参数接口调用出错
2019-08-14  11:08:42.908 [https-jsse-nio-8443-exec-10] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArrayIndexOutOfBoundsException: 1] with root cause
java.lang.ArrayIndexOutOfBoundsException: 1
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:316)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  11:09:11.930 [https-jsse-nio-8443-exec-4] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of ] with root cause
net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of 
	at net.sf.json.util.JSONTokener.syntaxError(JSONTokener.java:499)
	at net.sf.json.JSONObject._fromJSONTokener(JSONObject.java:972)
	at net.sf.json.JSONObject._fromString(JSONObject.java:1201)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:165)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:134)
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  11:16:58.693 [https-jsse-nio-8443-exec-2] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArrayIndexOutOfBoundsException: 1] with root cause
java.lang.ArrayIndexOutOfBoundsException: 1
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:316)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  11:26:55.647 [https-jsse-nio-8443-exec-10] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArrayIndexOutOfBoundsException: 1] with root cause
java.lang.ArrayIndexOutOfBoundsException: 1
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:316)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  11:27:47.379 [https-jsse-nio-8443-exec-2] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArrayIndexOutOfBoundsException: 1] with root cause
java.lang.ArrayIndexOutOfBoundsException: 1
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:316)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  11:40:25.574 [https-jsse-nio-8443-exec-2] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of ] with root cause
net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of 
	at net.sf.json.util.JSONTokener.syntaxError(JSONTokener.java:499)
	at net.sf.json.JSONObject._fromJSONTokener(JSONObject.java:972)
	at net.sf.json.JSONObject._fromString(JSONObject.java:1201)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:165)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:134)
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  13:19:17.352 [https-jsse-nio-8443-exec-6] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of ] with root cause
net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of 
	at net.sf.json.util.JSONTokener.syntaxError(JSONTokener.java:499)
	at net.sf.json.JSONObject._fromJSONTokener(JSONObject.java:972)
	at net.sf.json.JSONObject._fromString(JSONObject.java:1201)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:165)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:134)
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  13:41:50.156 [https-jsse-nio-8443-exec-8] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of ] with root cause
net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of 
	at net.sf.json.util.JSONTokener.syntaxError(JSONTokener.java:499)
	at net.sf.json.JSONObject._fromJSONTokener(JSONObject.java:972)
	at net.sf.json.JSONObject._fromString(JSONObject.java:1201)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:165)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:134)
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  13:57:31.133 [https-jsse-nio-8443-exec-3] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of ] with root cause
net.sf.json.JSONException: A JSONObject text must begin with '{' at character 0 of 
	at net.sf.json.util.JSONTokener.syntaxError(JSONTokener.java:499)
	at net.sf.json.JSONObject._fromJSONTokener(JSONObject.java:972)
	at net.sf.json.JSONObject._fromString(JSONObject.java:1201)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:165)
	at net.sf.json.JSONObject.fromObject(JSONObject.java:134)
	at com.jinglun.guard.user.controller.UserController.callback(UserController.java:324)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  14:28:14.829 [https-jsse-nio-8443-exec-6] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed
	at org.apache.catalina.connector.ResponseFacade.sendRedirect(ResponseFacade.java:488)
	at org.springframework.web.servlet.view.RedirectView.sendRedirect(RedirectView.java:628)
	at org.springframework.web.servlet.view.RedirectView.renderMergedOutputModel(RedirectView.java:314)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:316)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  14:28:56.574 [https-jsse-nio-8443-exec-6] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot call sendRedirect() after the response has been committed
	at org.apache.catalina.connector.ResponseFacade.sendRedirect(ResponseFacade.java:488)
	at org.springframework.web.servlet.view.RedirectView.sendRedirect(RedirectView.java:628)
	at org.springframework.web.servlet.view.RedirectView.renderMergedOutputModel(RedirectView.java:314)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:316)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  16:36:36.127 [https-jsse-nio-8443-exec-1] ERROR o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [org.apache.shiro.session.InvalidSessionException: java.lang.IllegalStateException: getAttribute: Session already invalidated] with root cause
java.lang.IllegalStateException: getAttribute: Session already invalidated
	at org.apache.catalina.session.StandardSession.getAttribute(StandardSession.java:1145)
	at org.apache.catalina.session.StandardSessionFacade.getAttribute(StandardSessionFacade.java:103)
	at org.apache.shiro.web.session.HttpServletSession.getAttribute(HttpServletSession.java:146)
	at org.apache.shiro.session.ProxiedSession.getAttribute(ProxiedSession.java:121)
	at org.apache.shiro.subject.support.DelegatingSubject.getRunAsPrincipalsStack(DelegatingSubject.java:469)
	at org.apache.shiro.subject.support.DelegatingSubject.getPrincipals(DelegatingSubject.java:153)
	at org.apache.shiro.subject.support.DelegatingSubject.getPrincipal(DelegatingSubject.java:149)
	at org.apache.shiro.web.servlet.ShiroHttpServletRequest.getSubjectPrincipal(ShiroHttpServletRequest.java:96)
	at org.apache.shiro.web.servlet.ShiroHttpServletRequest.getUserPrincipal(ShiroHttpServletRequest.java:112)
	at org.springframework.web.servlet.FrameworkServlet.getUsernameForRequest(FrameworkServlet.java:1159)
	at org.springframework.web.servlet.FrameworkServlet.publishRequestHandledEvent(FrameworkServlet.java:1144)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1022)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  17:13:39.228 [https-jsse-nio-8443-exec-10] WARN  org.apache.shiro.authc.AbstractAuthenticator - Authentication failed for token submission [org.apache.shiro.authc.UsernamePasswordToken - admin, rememberMe=false].  Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException).
java.lang.Error: Unresolved compilation problem: 
	The type Realm must implement the inherited abstract method AuthenticatingRealm.doGetAuthenticationInfo(AuthenticationToken)

	at com.jinglun.guard.shiro.Realm.doGetAuthenticationInfo(Realm.java:33)
	at org.apache.shiro.realm.AuthenticatingRealm.getAuthenticationInfo(AuthenticatingRealm.java:568)
	at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doSingleRealmAuthentication(ModularRealmAuthenticator.java:180)
	at org.apache.shiro.authc.pam.ModularRealmAuthenticator.doAuthenticate(ModularRealmAuthenticator.java:267)
	at org.apache.shiro.authc.AbstractAuthenticator.authenticate(AbstractAuthenticator.java:198)
	at org.apache.shiro.mgt.AuthenticatingSecurityManager.authenticate(AuthenticatingSecurityManager.java:106)
	at org.apache.shiro.mgt.DefaultSecurityManager.login(DefaultSecurityManager.java:270)
	at org.apache.shiro.subject.support.DelegatingSubject.login(DelegatingSubject.java:256)
	at com.jinglun.guard.user.controller.UserController.authen(UserController.java:142)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:61)
	at org.apache.shiro.web.servlet.AdviceFilter.executeChain(AdviceFilter.java:108)
	at org.apache.shiro.web.servlet.AdviceFilter.doFilterInternal(AdviceFilter.java:137)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.shiro.web.servlet.ProxiedFilterChain.doFilter(ProxiedFilterChain.java:66)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)
	at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)
	at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
	at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
	at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)
	at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)
	at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:607)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  17:13:39.228 [https-jsse-nio-8443-exec-10] ERROR org.apache.coyote.http11.Http11Processor - Error processing request
java.lang.NullPointerException: null
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  17:13:39.228 [https-jsse-nio-8443-exec-10] WARN  org.apache.catalina.connector.CoyoteAdapter - Exception while attempting to add an entry to the access log
java.lang.NullPointerException: null
	at org.apache.catalina.connector.CoyoteAdapter.log(CoyoteAdapter.java:490)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:438)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  17:13:39.228 [https-jsse-nio-8443-exec-10] ERROR org.apache.coyote.http11.Http11Processor - Error finishing response
java.lang.NullPointerException: null
	at org.apache.coyote.http11.Http11OutputBuffer.commit(Http11OutputBuffer.java:306)
	at org.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:985)
	at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:369)
	at org.apache.coyote.http11.Http11Processor.endRequest(Http11Processor.java:1112)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:448)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)
2019-08-14  17:19:32.519 [restartedMain] WARN  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Cannot deserialize session attribute [org.apache.shiro.subject.support.DefaultSubjectContext_PRINCIPALS_SESSION_KEY] for session [5679788421C113D159944DFD4E7D975A]
